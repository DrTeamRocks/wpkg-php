<?php namespace WPKG\Drivers\XML;

use WPKG\PackageCheckExits;

/**
 * Class PackagesXML class with all basic parameters
 *
 * @link https://wpkg.org/Packages.xml
 * @package WPKG\Drivers\XML
 */
class Packages
{
    /**
     * Current namespace
     * @var string
     */
    const ROOT = 'packages:packages';

    /**
     * List of attributes
     * @var array
     */
    const ROOT_ATTRIBUTES = [
        'xmlns:packages' => 'http://www.wpkg.org/packages',
        'xmlns:wpkg' => 'http://www.wpkg.org/wpkg',
        'xmlns:xsi' => 'http://www.w3.org/2001/XMLSchema-instance',
        'xsi:schemaLocation' => 'http://www.wpkg.org/packages xsd/packages.xsd'
    ];

    /**
     * XSD schema of XML
     * @var string
     */
    const XSD = __DIR__ . '/../../vendor/wpkg/wpkg-js/xsd/packages.xsd';

    /**
     * Import XML into Hosts object
     *
     * @param   $array - Original array generated by XML
     * @return  \WPKG\Interfaces\Packages
     */
    public function import(array $array): \WPKG\Interfaces\Packages
    {
        $packages = new \WPKG\Packages();

        // If we have main structure mode
        if (isset($array['@attributes'])) {
            // Parse single package
            $this->parse_package($packages, $array);
        } else {
            // Parse array of packages
            foreach ($array as $item) {
                $this->parse_package($packages, $item);
            }
        }

        return $packages;
    }

    private function parse_package(&$packages, $item)
    {
        $package = new \WPKG\Package();
        $attrs = $item['@attributes'];

        if (isset($attrs['id'])) $package->with('id', $attrs['id']);
        if (isset($attrs['name'])) $package->with('name', $attrs['name']);
        if (isset($attrs['revision'])) $package->with('revision', $attrs['revision']);
        if (isset($attrs['reboot'])) $package->with('reboot', $attrs['reboot']);
        if (isset($attrs['priority'])) $package->with('priority', $attrs['priority']);

        // Parse hard part of array
        if (isset($item['variable'])) $this->parse_variables($package, $item['variable']);
        if (isset($item['include'])) $this->parse_includes($package, $item['include']);
        if (isset($item['check'])) $this->parse_checks($package, $item['check']);
        if (isset($item['commands']['command'])) $this->parse_commands($package, $item['commands']['command']);

        // Parse legacy code
        foreach (['install', 'upgrade', 'remove', 'downgrade'] as $mode) {
            if (isset($item[$mode])) {
                $this->parse_commands($package, $item[$mode], $mode);
            }
        }

        $packages->setPackage($package);
    }

    /**
     * Parse array of includes
     * @param $package
     * @param $includes
     */
    private function parse_includes(&$package, $includes)
    {
        if (count($includes) > 1) {
            foreach ($includes as $include) {
                $package->withInclude($include['@attributes']['package-id']);
            }
        } else {
            $package->withInclude($includes['@attributes']['package-id']);
        }
    }

    /**
     * Parse array of variables
     * @param $package
     * @param $variables
     */
    private function parse_variables(&$package, $variables)
    {
        if (count($variables) > 1) {
            foreach ($variables as $variable) {
                $this->parse_variables_simple($package, $variable);
            }
        } else {
            $this->parse_variables_simple($package, $variables);
        }
    }

    /**
     * Local method for simplify
     * @param $package
     * @param $variable
     */
    private function parse_variables_simple(&$package, &$variable)
    {
        $name = $variable['@attributes']['name'];
        $value = $variable['@attributes']['value'];
        $os = isset($variable['@attributes']['os']) ? $variable['@attributes']['os'] : null;
        $arch = isset($variable['@attributes']['architecture']) ? $variable['@attributes']['architecture'] : null;

        $package->withVariable($name, $value, $os, $arch);
    }

    /**
     * Parse checks array
     * @param $package
     * @param $checks
     */
    private function parse_checks(&$package, $checks)
    {
        if (count($checks) > 1) {
            foreach ($checks as $check) {
                $this->parse_checks_simple($package, $check);
            }
        } else {
            $this->parse_checks_simple($package, $checks);
        }
    }

    /**
     * Local method for simplify
     * @param $package
     * @param $check
     */
    private function parse_checks_simple(&$package, &$check)
    {
        $type = $check['@attributes']['type'];
        $condition = $check['@attributes']['condition'];
        $path = $check['@attributes']['path'];
        $value = isset($check['@attributes']['value']) ? $check['@attributes']['value'] : null;

        $package->withCheck($type, $condition, $path, $value);
    }

    /**
     * Parse commands array
     * @param $package
     * @param $commands
     */
    private function parse_commands(&$package, $commands, string $type = null)
    {
        if (count($commands) > 1) {
            // Parse commands
            foreach ($commands as $command) {
                if (!empty($type)) $command['@attributes']['type'] = $type;
                $this->parse_commands_simple($package, $command);
            }
        } else {
            if (!empty($type)) $commands['@attributes']['type'] = $type;
            $this->parse_commands_simple($package, $commands);
        }
    }

    /**
     * Local method for simplify
     * @param $package
     * @param $command
     */
    private function parse_commands_simple(&$package, $command)
    {
        $type = $command['@attributes']['type'];
        $cmd = isset($command['@attributes']['cmd']) ? $command['@attributes']['cmd'] : null;
        $include = isset($command['@attributes']['include']) ? $command['@attributes']['include'] : null;

        // Parse exits codes subarray
        $exits = null;
        if (isset($command['exit'])) {
            $exits = $this->parse_exits($command['exit']);
        }

        // Add command
        $package->withCommand($type, $cmd, $include, $exits);
    }

    /**
     * Generate object with exit codes of current command
     *
     * @param   $exits - Array of exit codes
     * @return  PackageCheckExits
     */
    private function parse_exits(array $exits): PackageCheckExits
    {
        // Exit codes object
        $_exits = new PackageCheckExits();
        // If codes count more than 1
        if (count($exits) > 1) {
            // Parse codes
            foreach ($exits as $exit) {
                $reboot = isset($exit['@attributes']['reboot']) ? $exit['@attributes']['reboot'] : null;
                $code = $exit['@attributes']['code'];
                $_exits->add($code, $reboot);
            }
        } else {
            $reboot = isset($exits['@attributes']['reboot']) ? $exits['@attributes']['reboot'] : null;
            $code = $exits['@attributes']['code'];
            $_exits->add($code, $reboot);
        }
        return $_exits;
    }
}
