<?php namespace WPKG\Drivers\XML;

/**
 * Class ConfigXML class with all basic parameters
 *
 * @link https://wpkg.org/Config.xml
 * @package WPKG\Drivers\XML
 */
class Config
{
    /**
     * Current namespace
     * @var string
     */
    const ROOT = 'config';

    /**
     * List of attributes
     * @var array
     */
    const ROOT_ATTRIBUTES = [
        'xmlns:profiles' => 'http://www.wpkg.org/config',
        'xmlns:xsi' => 'http://www.w3.org/2001/XMLSchema-instance',
        'xsi:schemaLocation' => 'http://www.wpkg.org/config xsd/config.xsd'
    ];

    /**
     * XSD schema of XML
     * @var string
     */
    const XSD = __DIR__ . '/../../vendor/wpkg/wpkg-js/xsd/config.xsd';

    /**
     * Import XML into Config object
     *
     * @param   $array - Original array generated by XML
     * @return  \WPKG\Interfaces\Config
     */
    public function import(array $array): \WPKG\Interfaces\Config
    {
        $config = new \WPKG\Config();

        if (isset($array['param'])) {
            if (!isset($array['param']['@attributes'])) {
                foreach ($array['param'] as $param) {
                    $name = $param['@attributes']['name'];
                    $value = $param['@attributes']['value'];
                    $config->with($name, $value);
                }
            } else {
                $name = $array['param']['@attributes']['name'];
                $value = $array['param']['@attributes']['value'];
                $config->with($name, $value);
            }
        }

        if (isset($array['variables']['variable'])) {
            $this->parse_variables($config, $array['variables']['variable']);
        }

        return $config;
    }

    /**
     * Parse array of variables
     * @param $config
     * @param $variables
     */
    private function parse_variables(&$config, $variables)
    {
        if (count($variables) > 1) {
            foreach ($variables as $variable) {
                $this->parse_variables_simple($config, $variable);
            }
        } else {
            $this->parse_variables_simple($config, $variables);
        }
    }

    /**
     * Local method for simplify
     * @param $config
     * @param $variable
     */
    private function parse_variables_simple(&$config, &$variable)
    {
        $name = $variable['@attributes']['name'];
        $value = $variable['@attributes']['value'];
        $os = isset($variable['@attributes']['os']) ? $variable['@attributes']['os'] : null;
        $arch = isset($variable['@attributes']['architecture']) ? $variable['@attributes']['architecture'] : null;

        $config->withVariable($name, $value, $os, $arch);
    }
}
